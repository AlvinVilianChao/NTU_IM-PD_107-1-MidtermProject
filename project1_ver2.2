#include <iostream>
#include <vector>
#include <math.h>
using namespace std;


int NodeCnt, riskCnt, turnCost, maxDist; //n, m, w, d
int* riskPoint_X;
int* riskPoint_Y;
int* riskPoint_R;
int* riskPoint_P;
int source[2] = { 0 };
int dest[2] = { 0 };

void inputInfo();
double routeRisk(vector<double> x, vector<double> y);
double routeDist(vector<double> x, vector<double> y);
void findTurn();


int main()
{
	return 0;
}

void inputInfo()
{
	cin >> NodeCnt >> riskCnt >> turnCost >> maxDist;
	riskPoint_X = new int[riskCnt];
	riskPoint_Y = new int[riskCnt];
	riskPoint_R = new int[riskCnt];
	riskPoint_P = new int[riskCnt];
	for (int i = 0; i < riskCnt; i++) {
		cin >> riskPoint_X[i];
	}
	for (int i = 0; i < riskCnt; i++) {
		cin >> riskPoint_Y[i];
	}
	for (int i = 0; i < riskCnt; i++) {
		cin >> riskPoint_R[i];
	}
	for (int i = 0; i < riskCnt; i++) {
		cin >> riskPoint_P[i];
	}
	cin >> source[0] >> source[1] >> dest[0] >> dest[1];
}

// 計算總風險
double routeRisk(vector<double> x, vector<double> y)
{
	// risk 總風險, restDst 上一段走剩的距離
	double risk = 0, restDst = 0;

	// 如果vector沒東西
	if (x.size() == 0)
	{
		double xdiff = 0, ydiff = 0, dst = 0, xStarter = 0, yStarter = 0;
		xdiff = dest[0] - source[0], ydiff = dest[1] - source[1];
		dst = pow((pow(xdiff, 2) + pow(ydiff, 2)), 0.5);
		xStarter = source[0], yStarter = source[1];

		for (int j = 0; j <= dst; j++)
		{
			double xPerUnit = xdiff / dst, yPerUnit = ydiff / dst;
			xStarter += xPerUnit, yStarter += yPerUnit;

			for (int l = 0; l <= riskCnt; l++)
			{
				double difDistance = riskPoint_R[l] - pow((pow((x[l] - xStarter), 2) + pow((y[l] - yStarter), 2)), 0.5);
				if (difDistance <= 0)
					continue;

				double tempRisk = riskPoint_P[l] * (difDistance / riskPoint_R[l]);
				risk += tempRisk;
			}
		}
	}
	else
	{
		for (int i = 0; i <= x.size(); i++)
		{
			// xdiff 這個點與前一個點的距離, ydiff 同左, dst 兩點距離, xStarter 從指定點出發, yStarter 同左
			double xdiff = 0, ydiff = 0, dst = 0, xStarter = 0, yStarter = 0;

			// 算起點到第1個
			if (i == 0)
			{
				xdiff = x[i] - source[0], ydiff = y[i] - source[i];
				dst = pow((pow(xdiff, 2) + pow(ydiff, 2)), 0.5);
				xStarter = source[0], yStarter = source[1];
			}
			// 算最後一個轉折點到終點，要先將上一個路段剩餘的距離走完
			else if (i == x.size())
			{
				xdiff = dest[0] - x[i - 1], ydiff = dest[1] - x[i - 1];
				dst = pow((pow(xdiff, 2) + pow(ydiff, 2)), 0.5);
				xStarter = x[i] + ((restDst * xdiff) / dst), yStarter = y[i] + ((restDst * ydiff) / dst);
			}
			// 要先將上一個路段剩餘的距離走完
			else
			{
				xdiff = x[i] - x[i - 1], ydiff = y[i] - y[i - 1];
				dst = pow((pow(xdiff, 2) + pow(ydiff, 2)), 0.5);
				xStarter = x[i] + ((restDst * xdiff) / dst), yStarter = y[i] + ((restDst * ydiff) / dst);
			}

			// 剪掉先走的那段
			dst -= restDst;

			for (int j = 0; j <= dst; j++)
			{
				double xPerUnit = xdiff / dst, yPerUnit = ydiff / dst;
				xStarter += xPerUnit, yStarter += yPerUnit;

				for (int l = 0; l <= riskCnt; l++)
				{
					double difDistance = riskPoint_R[l] - pow((pow((x[l] - xStarter), 2) + pow((y[l] - yStarter), 2)), 0.5);

					if (difDistance <= 0)
						continue;

					double tempRisk = riskPoint_P[l] * (difDistance / riskPoint_R[l]);
					risk += tempRisk;
				}

				// 如果是該路段最後一個點的話，計算剩餘距離
				if (j == static_cast<int>(dst))
					restDst = dst - j;
			}
		}

	}

	// 轉彎幾次就加幾次
	risk += turnCost * x.size();

	return risk;
}

// 計算總長
double routeDist(vector<double> x, vector<double> y)
{
	double distance = 0;

	for (int i = 0; i <= x.size(); i++)
	{
		// 算起點到第1個間的距離
		if (i == 0)
			distance += sqrt(pow((x[i] - source[0]), 2) + pow((y[i] - source[0]), 2));
		// 算最後一個轉折點到終點的距離    
		else if (i == x.size())
			distance += sqrt(pow((dest[0] - x[i - 1]), 2) + pow((dest[1] - y[i - 1]), 2));
		else
			distance += sqrt(pow((x[i] - x[i - 1]), 2) + pow((y[i] - y[i - 1]), 2));
	}

	return distance;
}

void findTurn()  // 找兩個離目前位置最近的點，在這個矩形區找風險最小的轉折點，如果總風險沒有降低就不要轉
{
	bool* checkPoint = new bool[riskCnt];
	for (int i = 0; i < riskCnt; i++)
		checkPoint[i] = 0;
	int nowX = source[0];  // 現在位置
	int nowY = source[1];
	while (nowX != dest[0] && nowY != dest[1])
	{
		double distToNow, minDist1 = 2147483647, minDist2 = 2147483647;
		int min1 = -1, min2 = -1;
		for (int i = 0; i < riskCnt; i++)  // 先找出兩個距離最近的點
		{
			if ((nowX <= riskPoint_X[i] && riskPoint_X[i] <= dest[0]) || (nowX >= riskPoint_X[i] && riskPoint_X[i] >= dest[0]))
				if ((nowY <= riskPoint_Y[i] && riskPoint_Y[i] <= dest[1]) || (nowY >= riskPoint_Y[i] && riskPoint_Y[i] >= dest[1]))
				{
					distToNow = sqrt(pow(nowX - riskPoint_X[i], 2) + pow(nowY - riskPoint_Y[i], 2));
					if (distToNow < minDist1)
					{
						min1 = i;
						minDist1 = distToNow;
					}
					else if (distToNow < minDist2 && checkPoint[i] == 0)
					{
						min2 = i;
						minDist2 = distToNow;
					}
				}
		}
		// 找出這兩個最小距離點框出來的矩形區
		int minX, maxX, minY, maxY;
		if (min1 != -1 && min2 != -1)
		{
			checkPoint[min1] = 1;
			checkPoint[min2] = 1;
			minX = riskPoint_X[min1], maxX = riskPoint_X[min2];
			if (riskPoint_X[min1] > riskPoint_X[min2])
			{
				minX = riskPoint_X[min2];
				maxX = riskPoint_X[min1];
			}
			minY = riskPoint_Y[min1], maxY = riskPoint_Y[min2];
			if (riskPoint_Y[min1] > riskPoint_Y[min2])
			{
				minY = riskPoint_Y[min2];
				maxY = riskPoint_Y[min1];
			}
		}
		else
		{
			if (min1 != -1)
			{
				checkPoint[min1] = 1;
				minX = riskPoint_X[min1], maxX = nowX;
				if (riskPoint_X[min1] > nowX)
				{
					minX = nowX;
					maxX = riskPoint_X[min1];
				}
				minY = riskPoint_Y[min1], maxY = nowY;
				if (riskPoint_Y[min1] > nowY)
				{
					minY = nowY;
					maxY = riskPoint_Y[min1];
				}
			}
			else if (min2 != -1)
			{
				checkPoint[min2] = 1;
				minX = riskPoint_X[min2], maxX = nowX;
				if (riskPoint_X[min2] > nowX)
				{
					minX = nowX;
					maxX = riskPoint_X[min2];
				}
				minY = riskPoint_Y[min2], maxY = nowY;
				if (riskPoint_Y[min2] > nowY)
				{
					minY = nowY;
					maxY = riskPoint_Y[min2];
				}
			}
			else
			{
				minX = nowX, maxX = dest[0];
				if (nowX > dest[0])
				{
					minX = dest[0];
					maxX = nowX;
				}
				minY = nowY, maxY = dest[1];
				if (nowY > dest[1])
				{
					minY = dest[1];
					maxY = nowY;
				}
			}
			if (minX == maxX && minY != maxY)
			{
				minY = maxY;
				minX = 0;
				maxX = NodeCnt;
			}
			if (minX != maxX && minY == maxY)
			{
				minX = maxX;
				minY = 0;
				maxY = NodeCnt;
			}
		}

		double dist, riskTotal, minRisk = 2147483647, minDistToDest = 2147483647, distToDest;
		int bestX, bestY;
		for (int i = minX; i <= maxX; i++)  // 找出矩形區內風險最小點
			for (int j = minY; j <= maxY; j++)
			{
				riskTotal = 0;
				for (int k = 0; k < riskCnt; k++)
				{
					dist = sqrt(pow(i - riskPoint_X[k], 2) + pow(j - riskPoint_Y[k], 2));
					if (dist < riskPoint_R[k])
						riskTotal += riskPoint_P[k] * (riskPoint_R[i] - dist) / riskPoint_R[i];
				}
				distToDest = sqrt(pow(i - dest[0], 2) + pow(j - dest[1], 2));
				if (riskTotal < minRisk || (abs(riskTotal - minRisk) < 0.00001  && distToDest < minDistToDest))
				{
					minDistToDest = distToDest;
					minRisk = riskTotal;
					bestX = i;
					bestY = j;
				}
			}
		// 試著在矩形區最小風險點轉折，但如果加入後的結果沒有比較好，就不要轉，直接到矩形區的頂點再下一步
		/*
		double nowTotalRisk = routeRisk(x轉折, y轉折), nowTotalDist = routeDist(x轉折, y轉折);
		vecX.push_back(bestX);
		vecY.push_back(bestY);
		if (nowTotalRisk >= routeRisk(x轉折, y轉折) && routeDist(x轉折, y轉折) <= maxDist)
		{
			nowX = bestX;
			nowY = bestY;
		}
		else
		{
			vecX.pop_back();
			vecY.pop_back();
		}
		*/
		if (min1 + min2 != 2)
			break;
	}
}
